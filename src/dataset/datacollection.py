# -*- coding: utf-8 -*-
"""dataCollection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UO0qTw6JJw6MnVxClQKqG_CXqrdrPEDE
"""

from google.colab import drive
import os
import shutil
import kagglehub
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

#This project uses the [ROCO dataset](https://www.kaggle.com/datasets/virajbagal/roco-dataset),
#which must be downloaded using your Kaggle credentials via the `kagglehub` library
#in the following lignes we ll download only the radiogarphy part of the roco dataset


class ROCODataHandler:
    def __init__(self, dataset_id="virajbagal/roco-dataset", drive_path="/content/drive/MyDrive/roco_radiology_train"):
        self.dataset_id = dataset_id
        self.drive_path = drive_path
        self.mounted_drive = False
        self.dataset_path = ""
        self.src_radiology_path = ""
        self.images_path = ""
        self.csv_path = ""
        self.pairs = []

#drive should be mounted

    def download_dataset(self):
        self.dataset_path = kagglehub.dataset_download(self.dataset_id)
        print(" Dataset downloaded to:", self.dataset_path)

    def prepare_paths(self):
        self.src_radiology_path = os.path.join(self.dataset_path, "all_data", "train", "radiology")
        self.csv_path = os.path.join(self.src_radiology_path, "traindata.csv")
        self.images_path = os.path.join(self.src_radiology_path, "images")

    def copy_to_drive(self):
        os.makedirs(self.drive_path, exist_ok=True)
        shutil.copytree(self.src_radiology_path, self.drive_path, dirs_exist_ok=True)
        print(" data copied to Drive:", self.drive_path)

    def load_metadata(self):
        df = pd.read_csv(self.csv_path)
        self.pairs = list(zip(df["name"], df["caption"]))
        print(f" there's {len(self.pairs)} image-caption pairs.")

    def preview_samples(self, count=5):
        for i in range(min(count, len(self.pairs))):
            image_id, caption = self.pairs[i]
            image_path = os.path.join(self.images_path, image_id)

            if os.path.exists(image_path):
                img = Image.open(image_path)
                plt.imshow(img)
                plt.title(caption)
                plt.axis('off')
                plt.show()
            else:
                print(f" not found : {image_path}")


handler = ROCODataHandler()
handler.download_dataset()
handler.prepare_paths()
handler.copy_to_drive()
handler.load_metadata()
handler.preview_samples(5)